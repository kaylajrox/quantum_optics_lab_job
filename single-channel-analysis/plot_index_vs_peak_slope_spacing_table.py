import matplotlib

matplotlib.use('TkAgg')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
from pathlib import Path
import csv

# === Exclude Specific Peaks Here ===
excluded_peaks = [1,9,10,11,12]  # <-- Example: remove Peak Number 1, 5, 10 from plots


def analyze_and_save_slopes(df, results_dir, script_name):
    summary_csv = results_dir / 'results_spacing_from_slope.csv'
    detailed_csv = results_dir / 'results_detailed_peak_data.csv'

    with open(summary_csv, mode='w', newline='') as f_summary, open(detailed_csv, mode='w', newline='') as f_detailed:
        summary_writer = csv.writer(f_summary)
        detailed_writer = csv.writer(f_detailed)

        summary_writer.writerow([
            'Timestamp', 'Channel', 'Pulse Height (V)', 'Gain Voltage (V)',
            'State', 'Num Slopes Calculated', 'Average Spacing', 'Standard Deviation',
            'Fitted Slope', 'Source Files', 'Generated By'
        ])
        detailed_writer.writerow([
            'Timestamp', 'Channel', 'Pulse Height (V)', 'Gain Voltage (V)',
            'Peak Number', 'Peak Index', 'Peak Counts',
            'State', 'Num Slopes Calculated', 'Average Spacing', 'Standard Deviation',
            'Fitted Slope', 'Source File', 'Generated By'
        ])

        for ch in df['Channel'].unique():
            df_ch = df[df['Channel'] == ch]
            gain_voltages = sorted(df_ch['Gain Voltage (V)'].unique())

            for gain in gain_voltages:
                df_gain = df_ch[df_ch['Gain Voltage (V)'] == gain]
                for pulse_height in sorted(df_gain['Pulse Height (V)'].unique()):
                    df_pulse = df_gain[df_gain['Pulse Height (V)'] == pulse_height]

                    # === Exclude peaks before processing ===
                    df_pulse = df_pulse[~df_pulse['Peak Number'].isin(excluded_peaks)]
                    df_pulse = df_pulse.sort_values('Peak Number')

                    if len(df_pulse) < 2:
                        continue

                    state = df_pulse['State'].iloc[0] if 'State' in df_pulse.columns else 'unknown'
                    unique_sources = df_pulse['Source File'].dropna().astype(
                        str).unique() if 'Source File' in df_pulse.columns else ['unknown']
                    source_files_str = "; ".join(unique_sources)

                    x = df_pulse['Peak Number'].values
                    y = df_pulse['Peak Index'].values
                    counts = df_pulse['Peak Counts'].values

                    slopes = np.diff(y) / np.diff(x)
                    num_slopes = len(slopes)
                    avg_slope = np.mean(slopes)
                    slope_std = np.std(slopes)

                    coeffs = np.polyfit(x, y, deg=1)
                    fitted_slope = coeffs[0]

                    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

                    # Summary
                    summary_writer.writerow([
                        timestamp, ch, pulse_height, gain,
                        state, num_slopes, avg_slope, slope_std,
                        fitted_slope, source_files_str, script_name
                    ])

                    # Detailed
                    for i in range(len(df_pulse)):
                        detailed_writer.writerow([
                            timestamp, ch, pulse_height, gain,
                            x[i], y[i], counts[i],
                            state, num_slopes, avg_slope, slope_std,
                            fitted_slope, source_files_str, script_name
                        ])

    print(f"✅ Final slope analysis written to: {summary_csv}, {detailed_csv}")


# === Main Execution ===
script_dir = Path(__file__).resolve().parent
repo_root = script_dir.parent
results_dir = repo_root / "results-from-generated-data"
results_dir.mkdir(parents=True, exist_ok=True)

data_file = results_dir / "all_peaks_combined_sorted.csv"
print(f"Loading data from: {data_file}")

df = pd.read_csv(data_file)
df.columns = df.columns.str.strip()

# Run slope analysis function
analyze_and_save_slopes(df, results_dir, Path(__file__).name)

# === Plotting Section ===
pulse_color_map = {1.0: 'black', 1.1: 'darkblue', 1.3: 'green', 1.6: 'orange', 2.0: 'deeppink', 2.3: 'red'}

for ch in df['Channel'].unique():
    df_ch = df[df['Channel'] == ch]
    gain_voltages = sorted(df_ch['Gain Voltage (V)'].unique())

    for gain in gain_voltages:
        plt.figure(figsize=(10, 6))
        df_gain = df_ch[df_ch['Gain Voltage (V)'] == gain]

        for pulse_height in sorted(df_gain['Pulse Height (V)'].unique()):
            df_pulse = df_gain[df_gain['Pulse Height (V)'] == pulse_height]

            # === Exclude peaks before plotting ===
            df_pulse = df_pulse[~df_pulse['Peak Number'].isin(excluded_peaks)]
            df_pulse = df_pulse.sort_values('Peak Number')

            x = df_pulse['Peak Number'].values
            y = df_pulse['Peak Index'].values
            color = pulse_color_map.get(pulse_height, 'gray')

            if len(x) >= 2:
                coeffs = np.polyfit(x, y, deg=1)
                x_fit = np.linspace(min(x), max(x), 300)
                y_fit = np.polyval(coeffs, x_fit)

                plt.plot(x_fit, y_fit, linestyle='--', color=color, label=f'{pulse_height}V fit')
                eqn_str = f'y = {coeffs[0]:.2f}x + {coeffs[1]:.1f}'
                plt.text(x_fit[-1] + 0.3, y_fit[-1], eqn_str, fontsize=10, color=color, va='center')

            plt.plot(x, y, marker='o', linestyle='-', color=color, label=f'{pulse_height}V pulse')

        plt.title(f'{ch} — Peak Index vs. Peak Number (Gain = {gain} V)')
        plt.xlabel('Peak Number')
        plt.ylabel('Peak Index')
        plt.grid(True)
        plt.legend(title='Pulse Height')
        plt.tight_layout()
        plt.show()

